// Generated by CoffeeScript 1.6.3
(function() {
  var BaseSerializer, JsonSerializer, SERIALIZERS, YamlSerializer, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseSerializer = (function() {
    BaseSerializer.prototype.content_types = null;

    BaseSerializer.prototype.key = null;

    function BaseSerializer() {
      this.dumps = __bind(this.dumps, this);
      this.loads = __bind(this.loads, this);
      this.get_content_type = __bind(this.get_content_type, this);
      this.debug = require('debug')("slumber:" + this.constructor.name);
      this.debug('constructor');
    }

    BaseSerializer.prototype.get_content_type = function() {
      if (this.content_types == null) {
        throw 'Not Implemented';
      }
      return this.content_types[0];
    };

    BaseSerializer.prototype.loads = function(data) {
      throw 'Not Implemented';
    };

    BaseSerializer.prototype.dumps = function(data) {
      throw 'Not Implemented';
    };

    return BaseSerializer;

  })();

  JsonSerializer = (function(_super) {
    __extends(JsonSerializer, _super);

    function JsonSerializer() {
      this.dumps = __bind(this.dumps, this);
      this.loads = __bind(this.loads, this);
      _ref = JsonSerializer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    JsonSerializer.prototype.content_types = ['application/json', 'application/x-javascript', 'text/javascript', 'text/x-javascript', 'text/x-json'];

    JsonSerializer.prototype.key = 'json';

    JsonSerializer.prototype.loads = function(data) {
      return JSON.parse(data);
    };

    JsonSerializer.prototype.dumps = function(data) {
      return JSON.stringify(data);
    };

    return JsonSerializer;

  })(BaseSerializer);

  YamlSerializer = (function(_super) {
    __extends(YamlSerializer, _super);

    function YamlSerializer() {
      _ref1 = YamlSerializer.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    YamlSerializer.prototype.content_types = ['text/yaml'];

    YamlSerializer.prototype.key = 'yaml';

    return YamlSerializer;

  })(BaseSerializer);

  SERIALIZERS = module.exports.SERIALIZERS = {
    'json': JsonSerializer,
    'yaml': YamlSerializer
  };

  module.exports.Serializer = (function() {
    function Serializer(_default, serializers) {
      var key, obj, serializer, _i, _len;
      this["default"] = _default != null ? _default : 'json';
      if (serializers == null) {
        serializers = null;
      }
      this.get_content_type = __bind(this.get_content_type, this);
      this.dumps = __bind(this.dumps, this);
      this.loads = __bind(this.loads, this);
      this.get_serializer = __bind(this.get_serializer, this);
      if (serializers == null) {
        serializers = [
          (function() {
            var _results;
            _results = [];
            for (key in SERIALIZERS) {
              obj = SERIALIZERS[key];
              _results.push(new obj);
            }
            return _results;
          })()
        ][0];
      }
      if (!serializers) {
        throw 'There are no available serializers.';
      }
      this.serializers = {};
      for (_i = 0, _len = serializers.length; _i < _len; _i++) {
        serializer = serializers[_i];
        this.serializers[serializer.key] = serializer;
      }
    }

    Serializer.prototype.get_serializer = function(name, content_type) {
      if (name == null) {
        name = null;
      }
      if (content_type == null) {
        content_type = null;
      }
      return this.serializers[this["default"]];
    };

    Serializer.prototype.loads = function(data, format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.loads(data);
    };

    Serializer.prototype.dumps = function(data, format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.dumps(data);
    };

    Serializer.prototype.get_content_type = function(format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.get_content_type();
    };

    return Serializer;

  })();

}).call(this);
