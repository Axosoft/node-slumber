// Generated by CoffeeScript 1.6.3
(function() {
  var API, Serializer, append_slash, callable, debug, querystring, request, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  querystring = require('querystring');

  debug = require('debug')('slumber:api');

  _ref = require('./utils'), callable = _ref.callable, append_slash = _ref.append_slash;

  request = require('request');

  Serializer = require('./Serializer').Serializer;

  API = callable((function() {
    function _Class(base_url, opts, fn) {
      var _base, _base1, _base2, _base3, _base4;
      this.opts = opts != null ? opts : {};
      if (fn == null) {
        fn = null;
      }
      this.patch = __bind(this.patch, this);
      this.put = __bind(this.put, this);
      this.post = __bind(this.post, this);
      this.get = __bind(this.get, this);
      this._request = __bind(this._request, this);
      this._try_to_serialize = __bind(this._try_to_serialize, this);
      this._create_child = __bind(this._create_child, this);
      debug("constructor base_url=" + base_url);
      if (base_url != null) {
        this.opts.base_url = base_url;
      }
      if ((_base = this.opts).append_slash == null) {
        _base.append_slash = true;
      }
      if ((_base1 = this.opts).session == null) {
        _base1.session = null;
      }
      if ((_base2 = this.opts).auth == null) {
        _base2.auth = null;
      }
      if ((_base3 = this.opts).format == null) {
        _base3.format = 'json';
      }
      this.serializer = (_base4 = this.opts).serializer != null ? (_base4 = this.opts).serializer : _base4.serializer = new Serializer(this.opts.format);
      if (this.opts.append_slash) {
        this.opts.base_url = append_slash(this.opts.base_url);
      }
      this.base_url = this.opts.base_url;
      if (!this.opts.base_url) {
        throw "base_url is required";
      }
      process.nextTick(function() {
        if (fn) {
          return fn(this);
        }
      });
      return this;
    }

    _Class.prototype._create_child = function(path) {
      var callable_api, child, new_base_url;
      new_base_url = "" + (append_slash(this.base_url)) + path;
      callable_api = API;
      child = new callable_api(new_base_url, this.opts);
      return child;
    };

    _Class.prototype._try_to_serialize = function(response, body) {
      var content_type, e, stype;
      if (response.headers['content-type'] != null) {
        content_type = response.headers['content-type'].split(';')[0].replace(/^\s*|\s*$/g, '');
        try {
          stype = this.serializer.get_serializer(null, content_type);
        } catch (_error) {
          e = _error;
          return body;
        }
        return stype.loads(body);
      }
      return body;
    };

    _Class.prototype._request = function(method, kwargs, fn) {
      var req, request_options;
      request_options = {
        url: this.base_url,
        method: method,
        headers: {
          accept: this.serializer.get_serializer().get_content_type()
        }
      };
      if (kwargs.args != null) {
        request_options.url += '?' + querystring.stringify(kwargs.args);
      }
      if (kwargs.data != null) {
        request_options.form = kwargs.data;
      }
      debug("" + method, request_options.url);
      return req = request(request_options, fn);
    };

    _Class.prototype.callable = _Class.prototype._create_child;

    _Class.prototype.get = function(kwargs, fn) {
      var handle, resp,
        _this = this;
      if ('function' === typeof kwargs) {
        fn = kwargs;
        kwargs = {};
      } else {
        if (kwargs.args == null) {
          kwargs = {
            args: kwargs
          };
        }
      }
      handle = function(err, response, body) {
        var _ref1;
        if ((200 <= (_ref1 = response.statusCode) && _ref1 <= 299)) {
          return fn(err, _this._try_to_serialize(response, body));
        } else {
          return fn(true);
        }
      };
      return resp = this._request('GET', kwargs, handle);
    };

    _Class.prototype.post = function(kwargs, fn) {
      var handle, resp,
        _this = this;
      if (__indexOf.call(kwargs, 'args') < 0) {
        kwargs = {
          data: kwargs
        };
      }
      handle = function(err, response, body) {
        var _ref1;
        if ((200 <= (_ref1 = response.statusCode) && _ref1 <= 299)) {
          return fn(err, _this._try_to_serialize(response, body));
        }
        return fn(true);
      };
      return resp = this._request('POST', kwargs, handle);
    };

    _Class.prototype.put = function(kwargs, fn) {
      var handle, resp,
        _this = this;
      if (__indexOf.call(kwargs, 'args') < 0) {
        kwargs = {
          data: kwargs
        };
      }
      handle = function(err, response, body) {
        var _ref1;
        if ((200 <= (_ref1 = response.statusCode) && _ref1 <= 299)) {
          return fn(err, _this._try_to_serialize(response, body));
        }
        return fn(true);
      };
      return resp = this._request('PUT', kwargs, handle);
    };

    _Class.prototype.patch = function(kwargs, fn) {
      var handle, resp,
        _this = this;
      if (__indexOf.call(kwargs, 'args') < 0) {
        kwargs = {
          data: kwargs
        };
      }
      handle = function(err, response, body) {
        var _ref1;
        if ((200 <= (_ref1 = response.statusCode) && _ref1 <= 299)) {
          return fn(err, _this._try_to_serialize(response, body));
        }
        return fn(true);
      };
      return resp = this._request('PATCH', kwargs, handle);
    };

    return _Class;

  })());

  module.exports = API;

}).call(this);
