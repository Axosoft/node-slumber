// Generated by CoffeeScript 1.6.3
(function() {
  var API, append_slash, callable, debug, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('slumber:api');

  _ref = require('./utils'), callable = _ref.callable, append_slash = _ref.append_slash;

  API = (function() {
    function API(base_url, opts, fn) {
      var _base, _base1, _base2, _base3, _base4;
      this.opts = opts != null ? opts : {};
      if (fn == null) {
        fn = null;
      }
      this._create_child = __bind(this._create_child, this);
      debug("constructor base_url=" + base_url);
      if (base_url != null) {
        this.opts.base_url = base_url;
      }
      if ((_base = this.opts).append_slash == null) {
        _base.append_slash = true;
      }
      if ((_base1 = this.opts).session == null) {
        _base1.session = null;
      }
      if ((_base2 = this.opts).auth == null) {
        _base2.auth = null;
      }
      if ((_base3 = this.opts).format == null) {
        _base3.format = 'json';
      }
      if ((_base4 = this.opts).serializer == null) {
        _base4.serializer = null;
      }
      if (this.opts.append_slash) {
        this.opts.base_url = append_slash(this.opts.base_url);
      }
      this.base_url = this.opts.base_url;
      if (!this.opts.base_url) {
        throw "base_url is required";
      }
      process.nextTick(function() {
        if (fn) {
          return fn(this);
        }
      });
      return this;
    }

    API.prototype._create_child = function(path) {
      var callable_api, child, new_base_url;
      new_base_url = "" + (append_slash(this.base_url)) + path;
      callable_api = callable(API);
      child = new callable_api(new_base_url, this.opts);
      return child;
    };

    API.prototype.callable = API.prototype._create_child;

    API.prototype.get = function() {
      return debug('get');
    };

    API.prototype.post = function() {
      return debug('post');
    };

    API.prototype.patch = function() {
      return debug('path');
    };

    API.prototype.put = function() {
      return debug('put');
    };

    API.prototype["delete"] = function() {
      return debug('delete');
    };

    return API;

  })();

  module.exports = callable(API);

}).call(this);
