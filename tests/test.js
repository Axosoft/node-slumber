// Generated by CoffeeScript 1.6.3
(function() {
  var app, assert, base_url, express, freeport, slumber;

  assert = require('assert');

  express = require('express');

  freeport = require('freeport');

  slumber = require('..');

  base_url = 'http://www.example.com/';

  app = express();

  app.get('/', function(req, res) {
    return res.end('Hello World !');
  });

  app.get('/customer', function(req, res) {
    var obj;
    obj = {
      rand: Math.random(),
      aaa: 'bbb',
      ccc: 42
    };
    return res.json(obj);
  });

  describe('Routing', function() {
    var api;
    api = slumber.API(base_url, {});
    describe('#base_url', function() {
      return it('should retrieve a string with base_url of api', function() {
        return assert.equal(api.base_url, base_url);
      });
    });
    describe('one child', function() {
      return it('should retrieve a string with base_url of api with 1 child', function() {
        return assert.equal(api('customers').base_url, "" + base_url + "customers/");
      });
    });
    return describe('two children', function() {
      return it('should retrieve a string with base_url of api with 2 children', function() {
        return assert.equal(api('customers')(42).base_url, "" + base_url + "customers/42/");
      });
    });
  });

  describe('JsonSerializer', function() {
    var api;
    api = slumber.API(base_url, {});
    return describe('serializer', function() {
      it('should be an object', function() {
        return assert.equal('object', typeof api.serializer);
      });
      describe('#serializers', function() {
        return it('should return an array of available serializers', function() {
          return assert.equal('object', typeof api.serializer.serializers);
        });
      });
      return describe('#get_serializer()', function() {
        return it('should return the default serializer', function() {
          var serializer;
          serializer = api.serializer.get_serializer();
          assert.equal('object', typeof serializer);
          return assert.equal('json', serializer.key);
        });
      });
    });
  });

  describe('Local Express', function() {
    var api;
    api = null;
    before(function(done) {
      return freeport(function(err, port) {
        return app.listen(port, function() {
          return api = slumber.API("http://localhost:" + port + "/", {}, function() {
            return done();
          });
        });
      });
    });
    return describe('Connection', function() {
      it('should connect to express and return a string Hello World', function(done) {
        return api.get(function(err, ret) {
          assert.equal(err, null);
          assert.equal(ret, 'Hello World !');
          return done();
        });
      });
      return it('should return a json object', function(done) {
        return api('customer').get(function(err, ret) {
          var _ref;
          assert.equal(err, null);
          assert.equal('object', typeof ret);
          assert.equal((0 < (_ref = ret.rand) && _ref < 1), true);
          assert.equal(ret.aaa, 'bbb');
          assert.equal(ret.ccc, 42);
          return done();
        });
      });
    });
  });

}).call(this);
